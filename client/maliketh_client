#! /usr/bin/env python3

import logging
import optparse
import sys
import os

import structlog
from rmq import listen_for_messages_in_thread
from cli.logging import setup_structlog
import config

from comms import handle_server_auth
from cli.cli import main_loop


def parse_args() -> optparse.Values:
    opts = {}

    parser = optparse.OptionParser()
    parser.description = "Maliketh Operator Client"
    parser.usage = "usage: %prog --config OPERATOR_CONFIG_FILE [options]"
    parser.add_option(
        "-c",
        "--config",
        dest="config",
        default=None,
        help="The operator configuration file to use",
    )
    parser.add_option(
        "-d",
        "--debug",
        dest="debug",
        default=False,
        help="Enable debug mode",
        action="store_true",
    )
    parser.add_option(
        "-t",
        "--with-timestamps",
        dest="with_timestamps",
        default=False,
        help="Enable timestamps in log messages",
        action="store_true",
    )
    opts, args = parser.parse_args()
    return opts


def validate_args(opts) -> None:
    if opts.config is None:
        print("You must specify a configuration file")
        sys.exit(1)

    # Check if config file exists
    if not os.path.exists(opts.config):
        print("Config file does not exist")
        sys.exit(1)

    # Check if config file is readable
    if not os.access(opts.config, os.R_OK):
        print("Config file is not readable")
        sys.exit(1)


def main():

    opts = parse_args()
    validate_args(opts)
    if opts.debug:
        config.log_level = logging.DEBUG
    
    if opts.with_timestamps:
        config.log_with_timestamps = True

    setup_structlog(config.log_level, opts.with_timestamps)
    logger = structlog.get_logger()

    with open(opts.config, "r") as f:
        operator_config = config.OperatorConfig.from_json(f.read())

    # Authenticate to server
    try:
        auth_result = handle_server_auth(operator_config)
        operator_config.auth_token = auth_result
    except Exception as e:
        logger.error("Could not connect to server", exc_info=e)

    # Subscribe to RabbitMQ queue
    listen_for_messages_in_thread(operator_config, opts)

    # Go into main loop
    main_loop(operator_config)


if __name__ == "__main__":
    main()
